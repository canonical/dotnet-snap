name: dotnet
base: core22
adopt-info: dotnet-installer
summary: .NET CLI tools, SDK, and Runtime
description: |
  .NET is the free, open-source, cross-platform framework for building modern
  apps and powerful cloud services that work on Android, iOS, GNU/Linux, macOS
  and Windows.
  .
  This Snap also includes a powerful installer tool that allows you to manage
  your .NET installation and gives you the possibility to install as many
  multiple versions of .NET side-by-side as you want, as well as receive
  monthly security and feature updates whenever they become available.

grade: devel # must be 'stable' to release into candidate/stable channels
confinement: classic

package-repositories:
  - type: apt
    ppa: dotnet/snaps
    priority: always

architectures:
  - build-on: [amd64]
    build-for: [amd64]
  - build-on: [arm64]
    build-for: [arm64]

parts:
  pre-reqs:
    plugin: nil
    build-attributes:
      - enable-patchelf
    stage-packages:
      - libc6
      - libgcc-s1
      - libgssapi-krb5-2
      - libicu70
      - liblttng-ust1
      - libssl3
      - libstdc++6
      - libunwind8
      - zlib1g

  dotnet-installer:
    plugin: dump
    source: .
    after: [ pre-reqs ]
    build-packages:
      - dotnet-sdk-9.0
    stage-packages:
      - jq
    override-build: |
      /usr/bin/dotnet --info
      SNAP_VERSION=$(/usr/bin/dotnet --list-runtimes | grep NETCore.App | awk '{print $2}' | sort -r | head -n 1)
      craftctl set version="$SNAP_VERSION"
      
      if [ "${CRAFT_ARCH_BUILD_FOR}" = "amd64" ]; then
        RUNTIME_RID="linux-x64"
      elif [ "${CRAFT_ARCH_BUILD_FOR}" = "arm64" ]; then
        RUNTIME_RID="linux-arm64"
      else
        echo "Unsupported architecture (${CRAFT_ARCH_BUILD_FOR})"
        exit 1
      fi

      /usr/bin/dotnet publish src/Dotnet.Installer.Console --output "${SNAPCRAFT_PART_INSTALL}" \
        --configuration Release -r "${RUNTIME_RID}" -p:DebugSymbols=false -p:DebugType=none
      chmod 555 "${SNAPCRAFT_PART_INSTALL}/Dotnet.Installer.Console"
    override-stage: |
      craftctl default

      if [ "${CRAFT_ARCH_BUILD_FOR}" = "amd64" ]; then
        LIB_PATH=lib/x86_64-linux-gnu
        INTERPRETER="/snap/dotnet/current/lib64/ld-linux-x86-64.so.2"

        patchelf --force-rpath --set-rpath \$ORIGIN/../${LIB_PATH} \
          ${CRAFT_STAGE}/usr/bin/jq
        patchelf --force-rpath --set-rpath \$ORIGIN/usr/${LIB_PATH} \
          ${CRAFT_STAGE}/Dotnet.Installer.Console
      elif [ "${CRAFT_ARCH_BUILD_FOR}" = "arm64" ]; then
        LIB_PATH=lib/aarch64-linux-gnu
        INTERPRETER="/snap/dotnet/current/lib/ld-linux-aarch64.so.1"

        patchelf --force-rpath --set-rpath \$ORIGIN/../${LIB_PATH}:\$ORIGIN/../../${LIB_PATH} \
          ${CRAFT_STAGE}/usr/bin/jq
        patchelf --force-rpath --set-rpath \$ORIGIN/${LIB_PATH}:\$ORIGIN/usr/${LIB_PATH} \
          ${CRAFT_STAGE}/Dotnet.Installer.Console
      else
        echo "Unsupported architecture (${CRAFT_ARCH_BUILD_FOR})"
        exit 1
      fi

      patchelf --set-interpreter $INTERPRETER ${CRAFT_STAGE}/usr/bin/jq
      patchelf --set-interpreter $INTERPRETER ${CRAFT_STAGE}/Dotnet.Installer.Console

  dotnet-host:
    plugin: nil
    build-packages:
      - patchelf
    stage-packages:
      - dotnet-hostfxr-9.0
    override-stage: |
      craftctl default

      if [ "${CRAFT_ARCH_BUILD_FOR}" = "amd64" ]; then
        INTERPRETER="/snap/dotnet/current/lib64/ld-linux-x86-64.so.2"
        RPATH="/snap/dotnet/current/usr/lib/x86_64-linux-gnu"
      elif [ "${CRAFT_ARCH_BUILD_FOR}" = "arm64" ]; then
        INTERPRETER="/snap/dotnet/current/lib/ld-linux-aarch64.so.1"
        RPATH="/snap/dotnet/current/usr/lib/aarch64-linux-gnu:/snap/dotnet/current/lib/aarch64-linux-gnu"
      else
        echo "Unsupported architecture (${CRAFT_ARCH_BUILD_FOR})"
        exit 1
      fi

      DOTNET_VERSION=$(craftctl get version)
      patchelf --set-interpreter $INTERPRETER usr/lib/dotnet/dotnet
      patchelf --force-rpath --set-rpath $RPATH usr/lib/dotnet/dotnet
      patchelf --force-rpath --set-rpath $RPATH usr/lib/dotnet/host/fxr/${DOTNET_VERSION}/libhostfxr.so

  netstandard-targeting-pack:
    plugin: nil
    stage-packages:
      - netstandard-targeting-pack-2.1-9.0

apps:
  dotnet:
    command: Scripts/dotnet-launcher.sh
    environment:
      DOTNET_INSTALL_DIR: $SNAP_COMMON/dotnet
